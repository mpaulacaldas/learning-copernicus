---
title: stars demo
format: gfm
code-fold: TRUE
knitr:
  opts_chunk: 
    collapse: true
    comment: "#>" 
---

This is a short note to go over some common `stars` operations, given that I am 
more familiar with `raster` and `terra`.

The set-up info is in the code chunks below. I am downloading only a sample of 
the ERA5 Land images, for a couple of months and years, but doing an aggregation 
on the server side before reading the images into my computer. For more on that 
logic, see [`emcwfr-example.R`](emcwfr-example.R).

```{r}
#| message: false
#| warning: false
#| code-summary: Libraries and paths

library(tidyverse)
library(ecmwfr)
library(sf)
library(stars)
library(units) # for plotting units objects

local_path <- "daily_max_lima_stars.nc"
lima_gpkg <- "https://github.com/healthinnovation/sdb-gpkg/raw/main/Lima_provincia.gpkg"
```

```{r}
#| code-summary: Import and download
lima <- read_sf(lima_gpkg, quiet = TRUE) |> 
  summarise()

if (!fs::file_exists(local_path)) {
  code <- read_file("cdstoolbox.py")
  cdsapi_user <- function() {
    rc  <- "~/.cdsapirc" # created when setting up {cdsapi}
    key <- yaml::read_yaml(rc)$key
    uid <- gsub(":.*", "", key)
    uid
  }
  request <- list(
    code = code,
    kwargs = list(
      variable = "2m_temperature", # TODO: fails with more than 1 var
      year = c(2022, 2023), 
      month = 1:3
      ),
    workflow_name = "get_daily_max",
    target = "daily_max_lima_stars.nc"
  )
  target_path <- wf_request(request, user = cdsapi_user())
  fs::file_copy(target_path, local_path)
}
```

```{r}
#| code-summary: Plotting helpers
plot_image_lima <- function(image, vector = lima) {
  ggplot() +
    geom_stars(data = image) +
    geom_sf(data = vector, fill = NA, colour = "red") +
    facet_wrap(~time) +
    labs(x = NULL, y = NULL) +
    theme(legend.position = "top")
}

theme_set(theme_void())
```

`stars` doesn't automatically recognise the projection, so I set it using the 
one detected automatically by `raster`. The name of the value layer seems to be 
determined by default by the file name. I change that too to something nicer.

```{r}
(s <- read_stars(local_path))
st_crs(s) <- "+proj=longlat +datum=WGS84"
names(s)  <- "daily_max_temp"
```

This is a quick exploration of the differences in cropping/aggregation depending 
on whether the pixels are treated as points or polygons. I remove some layers 
from the raster for this demo.

```{r}
#| label: raster-geometry-main
p_ <- s |> 
  filter(day(time) == 15, month(time) %in% 1:2)
plot_image_lima(p_)
```

When cropping, `as_points = TRUE` results in a smaller selection of pixels.

```{r}
#| label: raster-geometry-crop
#| layout-ncol: 2
pp <- st_crop(p_, lima, as_points = TRUE) 
plot_image_lima(pp)

pa <- st_crop(p_, lima, as_points = FALSE)
plot_image_lima(pa)
```

The results from the aggregation may vary depending on whether the underlying 
pixel is treated as a point or as a polygon. For this type of data, I think
`as_points = FALSE` can be a reasonable default, though it could possibly 
slow down computations (of how much, I don't know).

```{r}
#| label: raster-geometry-aggr
#| layout-ncol: 2
# takes the value of the centroid of the pixel
ppp <- aggregate(pp, lima, mean, as_points = TRUE)
plot_image_lima(ppp)

# computes a weighted mean using the area of the pixel
paa <- aggregate(pa, lima, mean, as_points = FALSE)
plot_image_lima(paa)
```

Let's assume I go with the `as_points = TRUE` default. The aggregation results 
in a `stars` object that can be easily coerced to `tibble`. Though the resulting 
object has a `geom` column, note that it is not "sticky" as would be the case 
for an `sf` object. For this reason, I can remove it with `select()` instead of 
having to use `st_drop_geometry()`.

```{r}
tb <- s |> 
  st_crop(lima) |> 
  aggregate(lima, mean) |> 
  as_tibble() |> 
  select(-geom)
tb
```

Other nice features of the resulting `tibble`: the `time` column is a `dttm` 
object that can be easily parsed. The raster values are also parsed as Kelvin 
degrees with the column returned as a `units` object, making conversion to 
Celsius straight-forward.

```{r}
#| label: summary-stats-area
tb |> 
  mutate(daily_max_temp = set_units(daily_max_temp, "celsius")) |> 
  ggplot(aes(time, daily_max_temp)) +
  geom_line(na.rm = TRUE) +
  theme_bw()
```

We can extract the pixel value of a point using `st_extract()`. The temperature 
at the centre of Lima seems to be higher on average than the one of the entire 
area.

```{r}
#| label: summary-stats-both
lima_center <- lima |> 
  st_centroid()

tb_centre <- st_extract(s, lima_center) |> 
  as_tibble() |> 
  select(-geom)

list(centre = tb_centre, area = tb) |> 
  bind_rows(.id = "type") |> 
  ggplot(aes(time, daily_max_temp, colour = type)) +
  geom_line() +
  theme_bw()
```
